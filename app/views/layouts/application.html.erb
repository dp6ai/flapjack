<!DOCTYPE html>
<html>
<head>
  <title>Flapjack</title>
  <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
  <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
  <script src="http://js.pusher.com/2.1/pusher.min.js" type="text/javascript"></script>
  <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
  <%= javascript_include_tag "websocket_rails/main" if defined?(WebsocketRails) %>
  <%= csrf_meta_tags %>
</head>
<body>
<%= bootstrap_flash %>
<!-- navbar -->
<div class="navbar hidden-desktop">
  <div class="navbar-inner">
    <div class="container">
      <!-- .btn-navbar is used as the toggle for collapsed navbar content -->
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <!-- Be sure to leave the brand out there if you want it shown -->
      <a class="brand" href="/">Flapjack</a>
      <!-- Everything you want hidden at 940px or less, place within here -->
      <div class="nav-collapse collapse ">
          <ul class="nav">
            <li>
              <a href="/photos/new">Create Photo</a>
            </li>
            <li>
              <a href="/links/new">Create Link</a>
            </li>
            <li>
              <a href="/notes/new">Create Note</a>
            </li>
            <li>
              <a href="/videos/new">Create Video</a>
            </li>
            <% unless current_user %>
                <li>
                  <a href="/users/sign_up">Sign Up</a>
                </li>
                <li>
                  <a href="/users/sign_in">Sign In</a>
                </li>
            <% else %>
                <li>
                  <%= link_to "Sign Out", destroy_user_session_path, method: :delete %>
                </li>
            <% end %>
          </ul>
        <!-- .nav, .navbar-search, .navbar-form, etc -->
        <%= render 'layouts/filter' %>
      </div>
    </div>
  </div>
</div>
<%= yield %>


<script>
  var $container = $('#iso-container');

  $container.isotope({
    itemSelector: '.post',
    masonry: {
      columnWidth: 120
    },
    sortBy: 'number'
  });

  // toggle variable sizes of all elements
  $('#toggle-sizes').find('a').click(function() {
    $container
      .toggleClass('variable-sizes')
      .isotope('reLayout');
    return false;
  });

  //hover activates cursor and goes away when unhover

  overlayHover = function() {
    $(".post").hover(
      function() {
        $(this).find('.multi-comment-overlay').stop(true, false).animate({
          bottom: 50
        }, 1050);
      }
      // );
      ,
      function() {
        $(this).find('.multi-comment-overlay').stop(true, false).delay(300).animate({
          bottom: -455
        }, 1050);
      });
  }

  overlayHover();

  commentOverlayOnPageLoad = function() {

    $('.page-load-comments-overlay').each(function() {
      var idAttr = $(this).attr("id")
      var id = idAttr.split("-").pop()

      $.get("/posts/" + id + "/last_five_comments", function(comments) {

        var bodyHeight1 = $("#post-" + id).find('.post-body-photo').outerHeight(true) || $("#post-" + id).find('.post-body-link').outerHeight(true) || $("#post-" + id).find('.post-body-video').outerHeight(true) || $("#post-" + id).find('.post-body-note').outerHeight(true);

        var captionHeight = $("#post-" + id).find('.caption').outerHeight(true);

        var totalHeight = bodyHeight1 + captionHeight;

        maxSizeOfList1 = Math.round(totalHeight / 20);

        if (comments.length - maxSizeOfList1 > 0) {

          sliceNumber = comments.length - maxSizeOfList1
        } else {
          sliceNumber = 0
        }
        clippedComments = comments.slice(sliceNumber)

        $(clippedComments).each(function() {
          var specificComment = this;
          $.ajax({
            async: false,
            type: 'GET',
            url: "/follows/" + this.user_id + "/followed",
            success: function(data) {
              //callback
              if (data == -1) {
                $("#" + idAttr).append('<li class="comment-line"><a data-id="' + specificComment.post_id + '" class="follow-text">' + specificComment.body + '</a> </li>');
              } else if (data == 1) //following user
              {
                $("#" + idAttr).append('<li class="comment-line"><a data-id="' + specificComment.post_id + '" class="follow-text">' + specificComment.body + '</a>  <a data-user="' + specificComment.user_id + '" href="/unfollow/comment/' + specificComment.id + '" class="update-following unfollow-user">unfollow</a></li>');
              } else if(data == -2) {
                $("#" + idAttr).append('<li class="comment-line"><a href="users/sign_in" class="follow-text-sign-up">' + specificComment.body + '</a>  <a href="/users/sign_in" class="follow-user-sign-up">follow</a></li>');
              } 
              else {
                $("#" + idAttr).append('<li class="comment-line"><a data-id="' + specificComment.post_id + '" class="follow-text">' + specificComment.body + '</a>  <a data-user="' + specificComment.user_id + '" href="/follow/comment/' + specificComment.id + '" class="update-following follow-user">follow - ' + specificComment.user_id + '</a></li>');
              }


              //adds event listener to follow links on both overlay comments and admin comments

              $('a.update-following').unbind("click").on('click', function(event) 
              {
                  
                  event.preventDefault();
                  var address = $(this).attr('href');
                  var commentID = $(this).attr('href').split("/").pop();
                  var userID = $(this).data('user')

                  if ($(this).hasClass('follow-user')) 
                  {

                    $.post(address, function(someresponse) {
                      tester1 = someresponse;
                      if (someresponse.already_following != "1") { //won't add a socket listener or add new posts if already following that user
                        // alert("PAGE FOLLOW")
                        $.get("/follow/user_from_comment/" + commentID, function(response) {
                          var user = response.user_id.toString();
                          addSocketListenerForUser(user.toString());
                          addLastFivePosts(user);
                          //change text to followed
                        })
                      }
                      $('.follow-user[data-user="' + userID + '"]').text("unfollow").attr("href", "/unfollow/comment/" + commentID).attr('class', 'update-following unfollow-user')
                    })
                  } else {
                    $.post(address, function(someresponse) {
                      // alert("PAGE UNFOLLOW")
                      tester1 = someresponse;
                      $('#iso-container').find('[data-user="' + userID +'"]').not('a').remove()
                      $("#iso-container").isotope( 'reloadItems' ).isotope({ sortBy: 'original-order' });
                      // if (someresponse.already_following != "1") { //won't add a socket listener or add new posts if already following that user
                        // $.post("/unfollow/comment/" + commentID, function(response) {})
                      // }
                      $('.unfollow-user[data-user="' + userID + '"]').text("follow-" + userID).attr("href", "/follow/comment/" + commentID).attr('class', 'update-following follow-user')
                    })
                  }
              })


              //follow by comment
              // $('a.follow-user').unbind("click").on('click', function(event) {
              //   alert("page load follow");
              //   event.preventDefault();
              //   //alert("skjfhksdjhfsdkjfhsdkfjh")
              //   var address = $(this).attr('href');
              //   var commentID = $(this).attr('href').split("/").pop();
              //   var userID = $(this).data('user')
              //   // console.log(commentID)
              //   $.post(address, function(someresponse) {
              //     tester1 = someresponse;
              //     if (someresponse.already_following != "1") { //won't add a socket listener or add new posts if already following that user
              //       $.get("/follow/user_from_comment/" + commentID, function(response) {
              //         var user = response.user_id.toString();
              //         addSocketListenerForUser(user.toString());
              //         addLastFivePosts(user);
              //       })
              //     }
              //   })
              //   $('.follow-user[data-user="' + userID + '"]').text("unfollow").attr("href", "/unfollow/comment/" + commentID).attr('class','unfollow-user')
               
              // })


              // //same as above for unfollow


              //     $('a.unfollow-user').unbind("click").on('click', function(event) {
              //   alert("page load unfollow");
              //   event.preventDefault();
              //   //alert("skjfhksdjhfsdkjfhsdkfjh")
              //   var address = $(this).attr('href');
              //   var commentID = $(this).attr('href').split("/").pop();
              //   var userID = $(this).data('user')
              //   // console.log(commentID)
              //   $.post(address, function(someresponse) {
              //     tester1 = someresponse;
              //     if (someresponse.already_following != "1") { //won't add a socket listener or add new posts if already following that user

              //       //////****need to change the code below to remove event listener and remove that user's posts from index!

              //       // $.get("/unfollow/user_from_comment/" + commentID, function(response) {
              //       //   var user = response.user_id.toString();
              //       //   addSocketListenerForUser(user.toString());
              //       //   addLastFivePosts(user);
              //       // })
              //     }
              //   })
              //   $('.unfollow-user[data-user="' + userID + '"]').text("follow-" + userID).attr("href", "/follow/comment/" + commentID).attr('class', 'follow-user')
              // })




            }
          });
        })
      })
    })
  }

  if(window.location.pathname == '/')
  {
        window.onload = pageLoadFunctions();

      function pageLoadFunctions() {
        commentOverlayOnPageLoad();
        displayPreview();
        //followByComment();
      }

  }

  // get the post id from the id of each selection
  // use the id to make a get request
  // with response of get request, loop through and append each as an li element
</script>
</body>
</html>
